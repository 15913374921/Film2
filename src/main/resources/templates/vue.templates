<script setup>
import { Search, Plus, Refresh, UserFilled, Edit, Delete, User, Upload, Download } from '@element-plus/icons-vue'
import 'element-plus/dist/index.css'
import '@/assets/base.css'
import { reactive, ref } from 'vue'
import request from '@/utils/request'
import { ElMessage, ElMessageBox } from 'element-plus'
import config from "/config"
import { useUserStore } from '@/stores/user'
// 定义响应式变量
const name = ref('')
const pageNum = ref(1)
const pageSize = ref(5)
const username = ref('')
const total = ref(0)
const formRef = ref()
const dialogFormVisible = ref(false)
const multipleSelection = ref([])
const userStore = useUserStore()
const headers = {
  Authorization: userStore.getBearerToken
}

// 定义响应式对象
const state = reactive({
  tableData: []
})

const form = reactive({
  username: '',
  name: '',
  password: '',
  email: '',
  status: 1
})

// 表单校验规则
const rules = {
  username: [
    { required: true, message: '请输入用户名', trigger: 'blur' },
    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }
  ],
  password: [
    { required: true, message: '请输入密码', trigger: 'blur' },
    { min: 6, max: 20, message: '长度在 6 到 20 个字符', trigger: 'blur' }
  ],
  name: [
    { required: true, message: '请输入姓名', trigger: 'blur' }
  ],
  email: [
    { required: true, message: '请输入邮箱', trigger: 'blur' },
    { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }
  ]
}

// 方法定义
const handleSelectionChange = (val) => {
  multipleSelection.value = val
}

const handleBatchDelete = () => {
  if (!multipleSelection.value.length || !multipleSelection.value.length) {
    ElMessage.warning('请选择要删除的管理员')
    return
  }
  const ids = multipleSelection.value.map(item => item.id)
  ElMessageBox.confirm('确认删除所选管理员吗？', '提示', {
    confirmButtonText: '确定',
    cancelButtonText: '取消',
    type: 'warning'
  }).then(() => {
    request.post('/{lowerEntity}/del/batch', ids).then(res => {
      if (res.code === '200') {
        ElMessage.success('批量删除成功')
      load()
    } else {
        ElMessage.error(res.msg)
      }
    })
  })
}

const load = () => {
  request.get('/{lowerEntity}/page', {
    params: {
      username: username.value,
      name: name.value,
      pageNum: pageNum.value,
      pageSize: pageSize.value
    }
  }).then(res => {
    if (res.code === '200') {
      total.value = res.data.total
      state.tableData = res.data.records
    }
  })
}

const handleAdd = () => {
  form.id = undefined
  form.username = ''
  form.name = ''
  form.password = ''
  form.email = ''
  form.status = 1
  dialogFormVisible.value = true
}

const handleEdit = (row) => {
  Object.assign(form, row)
  dialogFormVisible.value = true
}

const handleDelete = (row) => {
  ElMessageBox.confirm('确认删除该管理员吗？', '提示', {
    confirmButtonText: '确定',
    cancelButtonText: '取消',
    type: 'warning'
  }).then(() => {
    request.delete('/{lowerEntity}/' + row.id).then(res => {
      if (res.code === '200') {
        ElMessage.success('删除成功')
        load()
      } else {
        ElMessage.error(res.msg)
      }
    })
  })
}

const reset = () => {
  username.value = ''
  name.value = ''
  pageNum.value = 1
  pageSize.value = 5
  load()
}

const handleCurrentChange = (page) => {
  pageNum.value = page
  load()
}

const handleSizeChange = (size) => {
  pageSize.value = size
  load()
}

const save = () => {
  formRef.value.validate((valid) => {
    if (valid) {
      if (form.id) {
        // 编辑
        request.put('/{lowerEntity}/' + form.id, form).then(res => {
          if (res.code === '200') {
            ElMessage.success('更新成功')
            dialogFormVisible.value = false
            load()
          } else {
            ElMessage.error(res.msg)
          }
        })
      } else {
        // 新增
        request.post('/{lowerEntity}', form).then(res => {
          if (res.code === '200') {
            ElMessage.success('添加成功')
            dialogFormVisible.value = false
            load()
          } else {
            ElMessage.error(res.msg)
          }
        })
      }
    }
  })
}

const exportExcel = () => {
  window.open(`http://${config.serverUrl}/{lowerEntity}/export`)
}

const handleImportSuccess = (res) => {
  if (res.code === '200') {
    ElMessage.success('导入成功')
    load()
  } else {
    ElMessage.error(res.msg)
  }
}

// 页面加载时自动加载数据
load()
</script>

<template>
  <div class="{lowerEntity}-container">
    <!-- 搜索和操作区域 -->
    <div class="search-wrapper">
      <div class="search-box">
        <el-input
          v-model="username"
          placeholder="请输入用户名"
          class="search-input"
          :prefix-icon="Search"
        />
        <el-input
          v-model="name"
          placeholder="请输入姓名"
          class="search-input"
          :prefix-icon="User"
        />
        <div class="button-group">
          <el-button type="primary" @click="load">
            <el-icon><Search /></el-icon>
            <span>搜索</span>
          </el-button>
          <el-button type="warning" @click="reset">
            <el-icon><Refresh /></el-icon>
            <span>重置</span>
          </el-button>
        </div>
      </div>
    </div>

    <div class="operation-group">
      <el-button type="success" @click="handleAdd">
        <el-icon><Plus /></el-icon>
        <span>新增</span>
      </el-button>
      <el-upload
        :action="`http://${config.serverUrl}/{lowerEntity}/import`"
        :on-success="handleImportSuccess"
        :headers="headers"
        :show-file-list="false"
      >
        <el-button type="primary">
          <el-icon><Upload /></el-icon>
          <span>导入</span>
        </el-button>
      </el-upload>
      <el-button type="success" @click="exportExcel">
        <el-icon><Download /></el-icon>
        <span>导出</span>
      </el-button>
      <el-button type="danger" @click="handleBatchDelete">
        <el-icon><Delete /></el-icon>
        <span>批量删除</span>
      </el-button>
    </div>

    <!-- 表格区域 -->
    <div class="table-wrapper">
      <el-table
        :data="state.tableData"
        stripe
        border
        @selection-change="handleSelectionChange"
        class="{lowerEntity}-table"
      >
        <el-table-column type="selection" width="55" align="center" />
        <el-table-column label="头像" width="70" align="center">
          <template #default>
            <el-avatar
              :size="40"
              :icon="UserFilled"
              class="user-avatar"
            />
          </template>
        </el-table-column>
{tableBody}
          <template #default="scope">
            <el-tag
              :type="scope.row.status === 1 ? 'success' : 'danger'"
              effect="dark"
              class="status-tag"
            >
              {{ scope.row.status === 1 ? '正常' : '禁用' }}
            </el-tag>
          </template>
        </el-table-column>
        <el-table-column label="操作" width="180" align="center">
          <template #default="scope">
            <el-button type="primary" size="small" @click="handleEdit(scope.row)">
              <el-icon><Edit /></el-icon>
              <span>编辑</span>
            </el-button>
            <el-button type="danger" size="small" @click="handleDelete(scope.row)">
              <el-icon><Delete /></el-icon>
              <span>删除</span>
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>

    <!-- 分页区域 -->
    <div class="pagination-wrapper">
      <el-pagination
        v-model:currentPage="pageNum"
        v-model:page-size="pageSize"
        :page-sizes="[5, 10, 20, 50]"
        :total="total"
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
        layout="total, sizes, prev, pager, next, jumper"
        background
        class="{lowerEntity}-pagination"
      />
    </div>

    <!-- 表单对话框 -->
    <el-dialog
      v-model="dialogFormVisible"
      :title="form.id ? '编辑管理员' : '新增管理员'"
      width="500px"
      :close-on-click-modal="false"
      destroy-on-close
      class="{lowerEntity}-dialog"
    >
      <el-form
        :model="form"
        :rules="rules"
        ref="formRef"
        label-width="80px"
        status-icon
        class="{lowerEntity}-form"
      >
{formBody}
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button @click="dialogFormVisible = false">取消</el-button>
          <el-button type="primary" @click="save">确定</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<style scoped>
.{lowerEntity}-container {
  padding: 20px;
  background-color: #f5f7fa;
  min-height: 100vh;
}

.search-wrapper {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  margin-bottom: 20px;
}

.search-box {
  display: flex;
  align-items: center;
  gap: 15px;
}

.search-input {
  width: 220px;
}

.button-group {
  display: flex;
  gap: 12px;
}

.operation-group {
  display: flex;
  align-items: center;
  gap: 12px;
  margin: 10px 0;
  flex-wrap: nowrap;
}

:deep(.el-upload) {
  display: flex;
}

.table-wrapper {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  margin-bottom: 20px;
  overflow-x: hidden;
}

.{lowerEntity}-table {
  margin-bottom: 20px;
  width: 100%;
}

.user-avatar {
  background-color: #e6f0ff;
  color: #409eff;
}

.status-tag {
  min-width: 60px;
}

.pagination-wrapper {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  display: flex;
  justify-content: center;
}

.{lowerEntity}-dialog {
  border-radius: 8px;
}

.{lowerEntity}-form {
  padding: 20px;
}

.dialog-footer {
  padding: 20px 0 0;
  text-align: right;
}

:deep(.el-button) {
  display: inline-flex !important;
  align-items: center;
  justify-content: center;
  gap: 6px;
  padding: 8px 16px;
  transition: all 0.3s ease;
  border-radius: 6px;
  font-weight: 500;
}

:deep(.el-button:hover) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

:deep(.el-button--primary) {
  background: linear-gradient(135deg, #409eff, #3a8ee6);
  border: none;
}

:deep(.el-button--success) {
  background: linear-gradient(135deg, #67c23a, #5daf34);
  border: none;
}

:deep(.el-button--warning) {
  background: linear-gradient(135deg, #e6a23c, #d48b1c);
  border: none;
}

:deep(.el-button--danger) {
  background: linear-gradient(135deg, #f56c6c, #e64242);
  border: none;
}

:deep(.el-button--small) {
  padding: 6px 12px;
  font-size: 12px;
}

:deep(.el-button .el-icon) {
  margin: 0;
  font-size: 14px;
  transition: transform 0.3s ease;
}

:deep(.el-button:hover .el-icon) {
  transform: scale(1.1);
}

:deep(.el-button--small .el-icon) {
  font-size: 12px;
}

:deep(.el-input__wrapper) {
  box-shadow: 0 0 0 1px #dcdfe6 inset;
}

:deep(.el-input__wrapper:hover) {
  box-shadow: 0 0 0 1px #409eff inset;
}

:deep(.el-table th) {
  background-color: #f5f7fa !important;
}

:deep(.el-pagination.is-background .el-pager li:not(.is-disabled).is-active) {
  background-color: #409eff;
}
</style>
